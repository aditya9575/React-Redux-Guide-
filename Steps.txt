Detailed Guide on Using React Redux with Redux Toolkit
Step-by-Step Process

1)first npm install @reduxjs/toolkit react-redux

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

2) then create a  redux named folder in our src -> inside it create a "Store.js" this file will contain our app store 
in the Store.js file start creating the store ->

*first import configureStore from reduxjs/toolkit
*then create a store with this configureStore 
*then pass reducer to it here thsi syntax will follow to make our store aware about the slice we made for a component/feature ->
inside the reducer object we pass on the name of the slice and the value to it will be the reducer of that slice that we imported 


example-->
import { configureStore } from "@reduxjs/toolkit";
import userReducer from "./slices/UserSlice";


export const store = configureStore({
  reducer: {
    user: userReducer,
  },
});


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


3) now create a "slices" folder inside the redux folder this folder will contain all our slices 
[Slices can be understood as a feature -> one feature means one new slice]

Slice making process :-> 
i) import createSlice from redux toolkit ---> import { createSlice } from '@reduxjs/toolkit';

ii) then have an initial state 

iii) then create slice including an export statement with the help of create slice and start by passing in
- the name of the slice to it 
- initial state 
- reducers object to it 
[these reducers will/can have two things state which is our initial state and actions which can be used to count the input if 
and when the user decides to pass on along with the trigger of the reducer function ]

iv) Then also add an export statement for our actions by storing them in a constant this way we can use them directly in the component
example --->
export const counterActions = counterSlice.actions;

v) Then at the end add a default export statement for our slicename.reducer

example-> 
import { createSlice } from "@reduxjs/toolkit";

const initialState = {
    value:0
};

export const counterSlice = createSlice({
    name:"myCounterSlice",
    initialState,
    reducers:{
        increment:(state) => {
            state.value += 1;       
          },
        incrementByAmount : (state,action) =>{
            state.value += action.payload
        },
    }
});


export const counterActions = counterSlice.actions;
export default counterSlice.reducer;


*****
[NOTE====> remember in the store we need to pass in the value of our slicename and its value as sliceReducer to avoid error
 which occurs when we try to import the slicename and then assign as the value for our slice in the reducer object]
*****

vi) Then go to our store and import our slice there and in the reducer object pass in the name of the slice and the value as told above
->   import counterReducer from "./slices/CounterSlice"; 
->   reducer:{
     myCounterSlice:counterReducer,
             }

Now we are ready to use these reducer function in our component 


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


4) now go to the top hierarchy and there we need to provide our store to our app by wrappin the app with provider component from 
react-redux and passing our storeName to the store prop provided by the provider component we are wrapping with 
[so that the entire app can access the states from the app ]

example ->

import { Provider } from "react-redux";
import { store } from "./redux/Store.js";

createRoot(document.getElementById("root")).render(
  <StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </StrictMode>
);


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

5) now we use the reducer functions from anywhere in our app 
 And to use we have two things :-
 i)useDispatch hook ->  used to dispatch and trigger the actions  
 ii)useSelector hook -> used to read some value present inside the store 

 steps to use the store :--->

* start by importing useDispatch to trigger the actions and also the useSelector to read the initial value if needed  
* then import the actions from the constant that we created in our slice 
* now inside the component destructure the useDispatch hook 
* make use of useSelector hook to read the initial value , -> [which takes in a function with state and then destructures the value 
                                                                by specifying the slice name from it 
                                                              ]
* then use this value if needed 
* now on some sort of event or as needed as per the use of app we can use the dispatch function to trigger the actions 

example -> 
import React from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { counterActions } from '../redux/slices/CounterSlice';

const CounterComponent = () => {
  const dispatch = useDispatch();
  
  // Get the current counter value from the Redux store
  const counterValue = useSelector((state) => state.myCounterSlice.value);

  return (
    <div>
      <p>Counter Value: {counterValue}</p>
      <button onClick={() => dispatch(counterActions.increment())}>Increment</button>
      <button onClick={() => dispatch(counterActions.incrementByAmount(5))}>Increment by 5</button>
    </div>
  );
};

export default CounterComponent;



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
